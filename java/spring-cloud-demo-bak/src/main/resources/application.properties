
# 应用名称
server.port=8085
spring.servlet.context-path=
spring.application.name=demo

########################## dubbo begin ##########################
# dubbo 协议
dubbo.protocol.id=dubbo
dubbo.protocol.name=dubbo
# dubbo 协议端口（ -1 表示自增端口，从 20880 开始）
dubbo.protocol.port=-1
# Dubbo 消费端订阅服务端的应用名，多个服务提供者用逗号分隔
# 这里订阅"自己"，会被忽略掉，请根据实际情况添加
dubbo.cloud.subscribed-services=demo
# dubbo 服务扫描基准包
dubbo.scan.base-packages=com.zhiteer.demo
########################## dubbo begin ##########################


########################## cloud begin ##########################
# Nacos帮助文档: https://nacos.io/zh-cn/docs/concepts.html
# Nacos认证信息
spring.cloud.nacos.discovery.username=nacos
spring.cloud.nacos.discovery.password=nacos
# Nacos 服务发现与注册配置，其中子属性 server-addr 指定 Nacos 服务器主机和端口
spring.cloud.nacos.discovery.server-addr=127.0.0.1:8848
# 注册到 nacos 的指定 namespace，默认为 public
spring.cloud.nacos.discovery.namespace=public

# Sentinel 控制台地址
spring.cloud.sentinel.transport.dashboard=localhost:8080
# 取消Sentinel控制台懒加载
# 默认情况下 Sentinel 会在客户端首次调用的时候进行初始化，开始向控制台发送心跳包
# 配置 sentinel.eager=true 时，取消Sentinel控制台懒加载功能
spring.cloud.sentinel.eager=true
# 如果有多套网络，又无法正确获取本机IP，则需要使用下面的参数设置当前机器可被外部访问的IP地址，供admin控制台使用
# spring.cloud.sentinel.transport.client-ip=
########################## cloud end ##########################


########################## seata begin ##########################
spring.cloud.alibaba.seata.tx-service-group=my_test_tx_group
seata.enabled=true
seata.application-id=${spring.application.name}
seata.tx-service-group=my_test_tx_group
seata.config.type=nacos
seata.config.nacos.namespace=public
seata.config.nacos.serverAddr=127.0.0.1:8848
#事务组tx-service-group与Seata Server端的配置保持一致
seata.config.nacos.group=SEATA_GROUP

seata.registry.type=nacos
seata.registry.nacos.application=seata-server
seata.registry.nacos.server-addr=127.0.0.1:8848
seata.registry.nacos.namespace=public
########################## seata end ##########################


########################## mysql begin ##########################
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://127.0.0.1:3306/test?serverTimezone=GMT%2B8&useUnicode=true&characterEncoding=utf-8&zeroDateTimeBehavior=convertToNull&allowMultiQueries=true
spring.datasource.username=root
spring.datasource.password=123456

# 连接池类型，druid连接池springboot暂无法默认支持，需要自己配置bean
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
spring.datasource.platform=mysql

# 打开PSCache，并且指定每个连接上PSCache的大小
spring.datasource.poolPreparedStatements=true
spring.datasource.maxPoolPreparedStatementPerConnectionSize=20

# 定义初始连接数
spring.datasource.initialSize=5
# 定义最大连接数
spring.datasource.maxActive=20
# 定义最大空闲
spring.datasource.maxIdle=20
# 定义最小空闲
spring.datasource.minIdle=1
# 定义最长等待时间
spring.datasource.maxWait=10000
# 定义运行一次空闲连接回收器周期60秒
spring.datasource.timeBetweenEvictionRunsMillis=60000
# 定义连接最小生存时间300秒
spring.datasource.minEvictableIdleTimeMillis=300000
spring.datasource.validationQuery=SELECT 'x'
spring.datasource.testWhileIdle=true
spring.datasource.testOnBorrow=false
spring.datasource.testOnReturn=false
# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙   stat!wall!log4j
spring.datasource.filters=stat,wall,slf4j
# 通过connectProperties属性来打开mergeSql功能；慢SQL记录
spring.datasource.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
# 合并多个DruidDataSource的监控数据
spring.datasource.useGlobalDataSourceStat=true
# SQL监控后台;//用户名
spring.datasource.druidLoginName=admin
# SQL监控后台;//用户密码
spring.datasource.druidPassword=admin
# SQL监控后台是否能够重置数据
spring.datasource.resetEnable=false
# QL监控后台IP黑名单
spring.datasource.deny=
# QL监控后台IP白名单
spring.datasource.allow=
########################## mysql end ##########################


########################## mybatis begin ##########################
mybatis.mapper-locations=classpath*:mapper/*.xml
mybatis.type-aliases-package=com.zhiteer.demo.**.model
#pagehelper
pagehelper.helper-dialect=mysql
pagehelper.reasonable=true
pagehelper.support-methods-arguments=true
pagehelper.params=count=countSql
########################## mybatis end ##########################


