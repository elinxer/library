<?php
/**
 +-----------------------------------------------------------------------------
 * @ 汉诺塔问题 - 递归
 +-----------------------------------------------------------------------------
 * 算法题目：古代有个梵塔，塔内有3个基座A,B,C开始时A基座上有64个盘子，盘子大小
 * 不等，大的在下，小的在上。有一个老和尚想把这64个盘子从A基座移到B基座，但每次
 * 只允许移动一个盘子，且在移动过程中，3个基座上的盘子都始终保持大盘在下，小盘
 * 在上。移动过程可以利用C基座做辅助。
 +-----------------------------------------------------------------------------
 * 问题分析：此问题又称为世界末日问题，因为以最高效的移动（无不必要的移动）方
 * 法，以每秒移动一次的速度64个盘子也需要接近5800亿年时间。当然不必真的去解64阶
 * 汉诺塔问题，一般地对任意n阶的汉诺塔问题进行讨论。
 +-----------------------------------------------------------------------------
 * 算法设计：用人类的大脑直接去解3，4，5阶的汉诺塔问题还可以，但是更高阶的问题
 * 就难以完成了，更不用说吧问题的解法抽象成循环的机械操作了。所以此问题多用递归
 * 算法求解，即使有非递归算法，也是模仿递归算法的执行过程而得到的。下面用递归
 * 法求解此题，约定盘子自上而下盘子的编号1，2，3，4,...,n
 +-----------------------------------------------------------------------------
 */


$n = 3; // 三阶汉诺塔计算
hanoi($n, "A", "B", "C");
function hanoi($n=3, $a='A', $b='B', $c='C') {
	if (!is_integer($n)) {
		echo "不是正整数";
		die();
	}
	if ($n > 0) {
		hanoi($n-1, $a, $c, $b);
		echo "移动塔".$n." 从 ".$a." 到 ".$b."<br>";
		hanoi($n-1, $c, $b, $a);
	}
}