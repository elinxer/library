<?php
/**
 +-----------------------------------------------------------------------------
 * @ 求矩阵鞍点 - 自顶向下设计
 +-----------------------------------------------------------------------------
 * 算法题目：求一个矩阵的鞍点，即在行上最小而在列上最大的点
 +-----------------------------------------------------------------------------
 * 算法设计：针对n x n矩阵进行设计，操作逐行进行，行列下标起始为0.
 * 1.顶层算法
 * for(i =0; i<n; i=i+1)
 * {
 *		//找到第i行上最小的元素t以及所在列minj;
 *		//检验t是否是第minj列的最大值，是，则输出这个鞍点
 * }
 * 2.找第i行上最小的元素t以及所在的列minj
 * t = a[i][0]; minj = 0;
 * for(j=1;j<n;j++)
 * {
 *		if(a[i][j]<t) {
 *			t = a[i][j];
 * 			minj = j;
 *      }
 * }
 * 3.检验t是否为第minj列的最大值，是则输出这个鞍点
 *	for ($k=0; $k < n; $k++) { 
 *		if (a[k][minj]>t) {
 *			break;
 *		}
 *		if (k < n) {
 *			continue;
 *		}
 *		print("the result is a[",i,"]]",minj,"]=",t);
 *	}
 +-----------------------------------------------------------------------------
 * 算法说明：1）算法中minj代表当前行中最小值的列下标，循环变量i,j分别代表行、
 * 列下标。循环变量k也代表行下标，在循环for(k=1;k<n;k++)中只针对minj列进行比较。
 * 2）考虑到会有无解的情况，设置标志量kz，kz=0代表无解，找到一个解后，kz被赋值
 * 为1，就不再继续找鞍点的工作。
 +-----------------------------------------------------------------------------
 */

$n = 10;
$arr = readmtr($n);

$kz = 0;
$t  = 0;

for ($i=0; $i < $n; $i++) { 
	$t = $arr[$i][0];
	$minj = 0;
	for ($j=1; $j < $n; $j++) { 
		if ($arr[$i][$j] < $t) {
			$t = $arr[$i][$j];
			$minj = $j;
		}
	}
	for ($k=0; $k < $n; $k++) { 
		if ($arr[$k][$minj] > $t) {
			break;
		}
	}
	if ($k < $n) {
		continue;
	}
	echo "the result is a[".$i."][".$minj."]=".$t;
	$kz = 1;
	break;
}
// echo $kz;
if ($kz == 0) {
	echo "Non solution！";
}

//+----------------------------------------------------------------------------
function readmtr($n = 6) {
	$arr = array();
	for ($i=0; $i < $n; $i++) { 
		for ($j=0; $j < $n; $j++) { 
			$arr[$i][$j] = rand(1,99);
		}
	}
	return $arr;
}