<?php
/**
 +-----------------------------------------------------------------------------
 * @ 币种统计问题
 +-----------------------------------------------------------------------------
 * 问题描述：某单位给每个职工发工资（精确到元）。为了保证避免临时兑换零钱，且取
 * 款的张数最少，取工资前要统计出所有职工的工资所需各种币值（100，50，20，10，
 * 5，2，1）共7种的张数，编程完成
 +-----------------------------------------------------------------------------
 * 算法设计：（1）合理的情况是每人的工资应该由文件读入，为了突出算法思想还是从
 * 键盘输入每人的工资。
 * （2）为了能达到取款的张数最少，且保证不要临时兑换零钱，应该对每一个人的工资
 * 用贪婪的思想，先尽量多地取大面额的币种，由大到小的面额币种逐渐统计。
 * （3）7种面额无规律可循，而统计每个职工工资的计算都有用到这7种币值，为了能构
 * 造出循环不变式，将7种币值存储于数组中，这样7种币值可表示为B[i]，i=1,2,3,4,
 * 5,6,7.为了能实现贪婪策略，7种币值应该从大面额的币种到小面额的币种一次存储。
 * （4）算法需要统计7种面额钱币的数量，同样利用数组，设置一个有7个元素的累加器
 * 数组S，这样操作就可以通过循环进行。
 +-----------------------------------------------------------------------------
 * 算法说明：每求出一种面额所需的张数后，要不这部分的金额减去 GZ=GZ-A*B[j]，
 * 防止重新计算。
 +-----------------------------------------------------------------------------
 * 算法分析：算法的时间复杂度是O(n)
 +-----------------------------------------------------------------------------
 */

$gz = array(3021,2051,2051,3031,5454);//每人工资

$total = 0;
echo "每人工资数目：";
foreach ($gz as $k => $v) {
	$total += $v;
	echo $v.',';
}
echo "<p>总工资数目：".$total.'<br>';
echo "<p>总职工人数：".count($gz).'<p>';
//+--------------------------------------------------

$gz = array(3021,2051,2051,3031,5454);//每人工资
$B  = array(100,50,20,10,5,2,1); //币种
$S  = array(0,0,0,0,0,0,0); //每种所需张数
$n  = count($gz);
for ($i=0; $i < $n; $i++) { 
	for ($j=0; $j < 7; $j++) { 
		$num = floor($gz[$i]/$B[$j]); //商取整即为张数
		$S[$j] = $S[$j] + $num; //币种张数累加
		$gz[$i] = $gz[$i] - $num*$B[$j]; //减去已统计币种的钱
	}
}

//+------------------------------------------

echo "<p>钱币张数：</p>";
foreach ($S as $key => $value) {
	echo $B[$key].' -- '.$value.'<br>';
}
// var_dump($S);

